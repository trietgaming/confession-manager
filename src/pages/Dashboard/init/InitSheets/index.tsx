import {
  Component,
  For,
  createSignal,
  JSXElement,
  Show,
  createContext,
  useContext,
  onMount,
  Accessor,
  batch,
} from "solid-js";
import MainTitle from "ui-components/MainTitle";
import FreshStartModal from "./FreshStartModal";
import ConditionalFilteringModal from "./ConditionalFilteringModal";
import { createMutable, createStore, produce } from "solid-js/store";
import { confessionMetadata, confessionSpreadsheet } from "store/index";
import {
  CellColor,
  CellTextFormat,
  ConfessionSpreadsheetGridData,
  FilteredSheetMetadata,
  InitOptionsMetadatas,
  RGB,
  TextFormat,
  ThemeMap,
} from "types";
import rgbToHex from "methods/rgbToHex";
import Color from "classes/Color";
import hexToRgb from "methods/hexToRgb";
import getColorFromCell from "methods/getColorFromCell";

function setFrom<T extends unknown[]>(
  arr: T,
  diff: (prev: (typeof arr)[number], cur: (typeof arr)[number]) => boolean
) {
  if (arr.length === 0) return [];
  const result = [arr[0]] as T;
  for (let i = 1, n = arr.length; i < n; ++i) {
    const cur = arr[i];
    const prev = arr[i - 1];
    if (diff(prev, cur)) {
      result.push(cur);
    }
  }
  return result;
}

const SpreadsheetDataContext = createContext<
  ConfessionSpreadsheetGridData | { [key: string]: any }
>({});

const InitSheets: Component = () => {
  const initOptionsMetadatas: InitOptionsMetadatas = [
    {
      title: "üöÄ B·∫Øt ƒë·∫ßu nh∆∞ m·ªõi",
      description: `T·∫•t c·∫£ nh·ªØng c√¢u tr·∫£ l·ªùi confession tr∆∞·ªõc ƒë√≥ ·ªü b·∫£ng t√≠nh s·∫Ω ƒë∆∞·ª£c sao ch√©p sang m·ªôt trang t√≠nh m·ªõi ƒë·ªÉ l∆∞u tr·ªØ. C√°c confession sau n√†y s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ l·∫ßn l∆∞·ª£t ·ªü c√°c trang t√≠nh m√† b·∫°n ƒë√£ ƒë·ªãnh nghƒ©a.`,
      modal: FreshStartModal,
    },
    {
      title: "üíª L·ªçc c√≥ ƒëi·ªÅu ki·ªán",
      description:
        "T·ª± ƒë·ªông sao ch√©p c√°c c√¢u tr·∫£ l·ªùi confession tr∆∞·ªõc ƒë√≥ sang c√°c trang t√≠nh ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a, d·ª±a tr√™n c√°c ƒëi·ªÅu ki·ªán b·∫°n ƒë∆∞a ra nh∆∞ ki·ªÉu ch·ªØ, m√†u ch·ªØ, m√†u n·ªÅn c·ªßa c√°c √¥ trong c√°c h√†ng thu·ªôc trang t√≠nh ch·ª©a c√¢u tr·∫£ l·ªùi ban ƒë·∫ßu.",
      modal: ConditionalFilteringModal,
    },
  ];

  const [modalShows, setModalShows] = createStore<boolean[]>(
    new Array(initOptionsMetadatas.length).fill(false)
  );

  const spreadsheetGridData = createMutable<
    ConfessionSpreadsheetGridData | { [key: string]: any }
  >({});

  const handleToggleModal = (index: number) => {
    setModalShows(
      produce((modalShows) => {
        modalShows[index] = !modalShows[index];
      })
    );
    // console.log(modalShows[index])
  };

  // TODO: HEAVY TASKS, ALWAYS OPTIMIZE WHEN POSSIBLE!
  onMount(async () => {
    const getResult = (
      await gapi.client.sheets.spreadsheets.getByDataFilter(
        {
          spreadsheetId: confessionSpreadsheet.spreadsheetId!,
          fields:
            "sheets/data/rowData/values(formattedValue,effectiveFormat(backgroundColorStyle,textFormat(bold,italic,underline,strikethrough,foregroundColorStyle)))",
        },
        {
          includeGridData: true,
          dataFilters: [
            {
              gridRange: {
                startRowIndex: 0,
                sheetId: confessionMetadata.pendingSheet?.properties?.sheetId,
              },
            },
          ],
        }
      )
    ).result;
    const rowDatas = (
      (getResult.sheets as gapi.client.sheets.Sheet[])[0]
        .data as gapi.client.sheets.GridData[]
    )[0].rowData as gapi.client.sheets.RowData[];

    // console.log(rowDatas);

    // @ts-ignore
    const themeMap: ThemeMap = {};
    for (const colorPair of confessionSpreadsheet.properties!.spreadsheetTheme!
      .themeColors!) {
      themeMap[colorPair.colorType as string] = new Color(
        colorPair.color!.rgbColor!
      );
    }

    const backgroundColors: CellColor[] = [];
    const foregroundColors: CellColor[] = [];
    const textFormats: CellTextFormat[] = [];

    for (let i = 1, n = rowDatas.length; i < n; ++i) {
      const row = rowDatas[i];
      if (!row.values) continue;
      for (const cell of row.values) {
        if (!cell.formattedValue) continue;

        backgroundColors.push({
          color: getColorFromCell(
            cell.effectiveFormat!.backgroundColorStyle!,
            themeMap
          ),
          rowIndex: i,
        });

        const { foregroundColorStyle, ...textStyles } =
          cell.effectiveFormat?.textFormat!;

        foregroundColors.push({
          color: getColorFromCell(foregroundColorStyle!, themeMap),
          rowIndex: i,
        });

        for (const style of Object.values(textStyles)) {
          if (style === true) {
            // @ts-ignore
            textFormats.push({ format: textStyles, rowIndex: i });
            break;
          }
        }
      }
    }
    const colorCmp = (
      colorA: (typeof backgroundColors)[number],
      colorB: (typeof backgroundColors)[number]
    ) => {
      if (colorA.color.hex < colorB.color.hex) return -1;
      if (colorA.color.hex > colorB.color.hex) return 1;
      return 0;
    };
    backgroundColors.sort(colorCmp);
    foregroundColors.sort(colorCmp);
    textFormats.sort((a, b) => {
      if (a.format.bold === b.format.bold) {
        if (a.format.italic === b.format.italic) {
          if (a.format.strikethrough === b.format.strikethrough) {
            if (a.format.underline === b.format.underline) return 0;
            if (a.format.underline < b.format.underline) return -1;
            return 1;
          }
          if (a.format.strikethrough < b.format.strikethrough) return -1;
          return 1;
        }
        if (a.format.italic < b.format.italic) return -1;
        return 1;
      }
      if (a.format.bold < b.format.bold) return -1;
      return 1;
    });

    const backgroundColorSet = setFrom(
        backgroundColors,
        (prevColor, curColor) => prevColor.color.hex !== curColor.color.hex
      ),
      foregroundColorSet = setFrom(
        foregroundColors,
        (prevColor, curColor) => prevColor.color.hex !== curColor.color.hex
      ),
      textFormatSet: typeof textFormats = setFrom(
        textFormats,
        (prevFormat, curFormat) =>
          prevFormat.format.bold !== curFormat.format.bold ||
          prevFormat.format.italic !== curFormat.format.italic ||
          prevFormat.format.strikethrough !== curFormat.format.strikethrough ||
          prevFormat.format.underline !== curFormat.format.underline
      );
    // console.log(backgroundColors);
    // console.log(backgroundColorSet);
    // console.log(foregroundColorSet);
    // console.log(textFormatSet);

    batch(() => {
      const gridData = spreadsheetGridData as ConfessionSpreadsheetGridData;
      gridData.rowData = rowDatas;
      gridData.backgroundColor = backgroundColorSet;
      gridData.foregroundColor = foregroundColorSet;
      gridData.textFormat = textFormatSet;
      /// @ts-ignore
      gridData.selected = {};
      (
        [
          "acceptedSheet",
          "declinedSheet",
          "postedSheet",
        ] as FilteredSheetMetadata["key"][]
      ).forEach((key) => {
        gridData.selected[key] = {
          backgroundColor: [],
          foregroundColor: [],
          textFormat: [],
        };
      });
      gridData.themeMap = themeMap;
    });
  });

  return (
    <SpreadsheetDataContext.Provider value={spreadsheetGridData}>
      <div class="text-center">
        <MainTitle>C·∫•u tr√∫c h√≥a b·∫£ng t√≠nh</MainTitle>
        <p class="mx-4">
          Tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu, b·∫°n c·∫ßn c·∫•u tr√∫c b·∫£ng t√≠nh sao cho ·ª©ng d·ª•ng c√≥ th·ªÉ
          hi·ªÉu v√† qu·∫£n l√≠ c√°c confession s·∫µn c√≥ c≈©ng nh∆∞ sau n√†y.
          <br />
          H√£y ch·ªçn m·ªôt trong nh·ªØng c√°ch kh·ªüi t·∫°o sau:
        </p>
        <div class="flex flex-col my-10 mx-4 justify-center md:flex-row">
          {initOptionsMetadatas.map((option, index) => {
            const toggler = () => handleToggleModal(index);
            return (
              <>
                <button
                  class="block max-w-md p-6 bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 md:mx-2 my-2"
                  onClick={toggler}
                >
                  <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900">
                    {option.title}
                  </h5>
                  <p class="font-normal text-gray-700">{option.description}</p>
                </button>
                <option.modal
                  title={option.title}
                  isShow={modalShows[index]}
                  handleClose={toggler}
                />
              </>
            );
          })}
        </div>
        <p>
          <b>* L∆∞u √Ω: </b>
          Trang t√≠nh ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l√† c√°c trang t√≠nh: trang t√≠nh ch·ª©a c√¢u tr·∫£
          l·ªùi, trang t√≠nh "ƒë√£ duy·ªát", trang t√≠nh "ƒë√£ ƒëƒÉng", trang t√≠nh "ƒë√£ t·ª´
          ch·ªëi"
        </p>
      </div>
    </SpreadsheetDataContext.Provider>
  );
};

export default InitSheets;
export const useSpreadsheetData = () => useContext(SpreadsheetDataContext);
